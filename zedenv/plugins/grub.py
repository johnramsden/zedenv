import shutil
import os
import stat
import re
import tempfile
import subprocess

import click

import zedenv.lib.be
import zedenv.plugins.configuration as plugin_config
import zedenv.lib.system
from zedenv.lib.logger import ZELogger


class GRUB(plugin_config.Plugin):
    systems_allowed = ["linux", "freebsd"]

    bootloader = "grub"

    def __init__(self, zedenv_data: dict):

        super().__init__(zedenv_data)

        self.entry_prefix = "zedenv"

        self.old_entry = f"{self.entry_prefix}-{self.old_boot_environment}"
        self.new_entry = f"{self.entry_prefix}-{self.boot_environment}"

        self.zedenv_properties["grubdir"] = "/etc/grub.d"
        self.zedenv_properties["grubboot"] = "/boot/grub"

        if not os.path.isdir(self.zedenv_properties["grubdir"]):
            self.plugin_property_error("grubdir")

        if not os.path.isdir(self.zedenv_properties["grubboot"]):
            self.plugin_property_error("grubboot")

        self.grub_cfg = "grub.cfg"
        self.grub_cfg_path = os.path.join(self.grub_boot_dir, self.grub_cfg)

        self.grub_custom = "40_zedenv_custom"
        self.grub_custom_path = os.path.join(self.grub_dir, self.grub_custom)

    def edit_bootloader_entry(self, temp_dir: str):

        temp_grub_custom = os.path.join(temp_dir, self.grub_custom)

        strip_pool_dataset = "/".join([self.be_root.split("/", 1)[1], self.boot_environment])
        full_dataset = f"{self.be_root}/{self.boot_environment}"

        entry_guess_list = [
            "#!/bin/sh\n",
            "exec tail -n +3 $0\n",
            "# This file was generated by zedenv and may be overwritten\n",
            f"menuentry 'Linux [{self.boot_environment}]' " + "{",
            f"    linux /{strip_pool_dataset}/@/boot/vmlinuz-linux zfs={full_dataset} rw\n",
            f"    initrd /{strip_pool_dataset}/@/boot/initramfs-linux.img\n"
            "}\n"
        ]

        config_entries = os.listdir(self.grub_dir)
        old_custom = True if self.grub_custom in config_entries else False

        if old_custom and (self.old_boot_environment == self.boot_environment):
            ZELogger.log({
                "level": "INFO",
                "message": (f"Attempting to activate same boot environment while config "
                            f"'{self.grub_custom}' "
                            "already exists. Will not modify old configuration.\n")
            })
        else:
            if old_custom:
                ZELogger.log({
                    "level": "INFO",
                    "message": (f"Using existing entry {self.grub_custom} as template "
                                f"taking best guess at modifying.\n")
                })

                with open(self.grub_custom_path, "r") as old_custom:
                    old_custom_list = old_custom.readlines()

                new_entry_list = [l.replace(self.old_boot_environment, self.boot_environment)
                                  for l in old_custom_list]

            else:
                entry_guess_full = ''.join(entry_guess_list)
                ZELogger.log({
                    "level": "INFO",
                    "message": (f"You have no matching bootloader entries in {self.grub_custom}, "
                                f"taking best guess at creating one at {self.grub_custom}:\n"
                                f"{entry_guess_full}.\n")
                })

                new_entry_list = entry_guess_list

            if not self.noop:
                with open(temp_grub_custom, "w") as boot_conf:
                    boot_conf.writelines(new_entry_list)

                if not self.noconfirm:
                    if click.confirm(
                           "Would you like to edit the generated bootloader config?",
                            default=True):
                        click.edit(filename=temp_grub_custom)

                os.chmod(temp_grub_custom,
                         stat.S_IRWXU | stat.S_IRGRP | stat.S_IXGRP | stat.S_IROTH | stat.S_IXOTH)

    def grub_mkconfig(self):
        env = dict(os.environ, ZPOOL_VDEV_NAME_PATH='1')
        ZELogger.verbose_log({
            "level": "INFO",
            "message": (f"Generating "
                        "the GRUB configuration.\n")
        }, self.verbose)

        grub_call = ["grub-mkconfig", "-o", self.grub_cfg_path]

        try:
            grub_output = subprocess.check_call(grub_call, env=env,
                                                universal_newlines=True, stderr=subprocess.PIPE)
        except subprocess.CalledProcessError as e:
            raise RuntimeError(f"Failed to generate GRUB config.\n{e}\n.")

        return grub_output

    def post_activate(self):
        ZELogger.verbose_log({
            "level": "INFO",
            "message": (f"Creating Temporary working directory. "
                        "No changes will be made until the end of "
                        "the GRUB configuration.\n")
        }, self.verbose)

        with tempfile.TemporaryDirectory(prefix="zedenv", suffix=self.bootloader) as t_grub:
            ZELogger.verbose_log({
                "level": "INFO",
                "message": f"Created {t_grub}.\n"
            }, self.verbose)

            self.edit_bootloader_entry(t_grub)
            self.recurse_move(t_grub, self.grub_dir, overwrite=True)

        self.grub_mkconfig()

    def pre_activate(self):
        pass

    def mid_activate(self, be_mountpoint: str):
        pass
